syntax = "proto3";

import "google/protobuf/empty.proto";

package lute;

service Lute {
  rpc HealthCheck (google.protobuf.Empty) returns (HealthCheckReply) {}
}

message HealthCheckReply {
  bool ok = 1;
}

message PutFileRequest {
  string name = 1;
  string content = 2;
}

message PutFileReply {
  FileMetadata metadata = 1;
}

message FileMetadata {
  string id = 1;
  string name = 2;
  string first_saved_at = 3;
  string last_saved_at = 4;
}

message IsFileStaleRequest {
  string name = 1;
}

message IsFileStaleReply {
  bool stale = 1;
}

service FileService {
  rpc IsFileStale (IsFileStaleRequest) returns (IsFileStaleReply) {}
  rpc PutFile (PutFileRequest) returns (PutFileReply) {}
}

message GetCrawlerMonitorReply {
  CrawlerMonitor monitor = 1;
}

enum CrawlerStatus {
  Paused = 0;
  Running = 1;
  Draining = 2;
  Throttled = 3;
}

enum CrawlerItemPriority {
  Express = 0;
  High = 1;
  Standard = 2;
  Low = 3;
}

message CrawlerQueueItem {
  string item_key = 1;
  string enqueue_time = 2;
  string deduplication_key = 3;
  string file_name = 4;
  CrawlerItemPriority priority = 5;
  optional string correlation_id = 6;
  map<string, string> metadata = 7;
}

message ClaimedCrawlerQueueItem {
  CrawlerQueueItem item = 1;
  uint32 claim_ttl_seconds = 2;
}

message CrawlerMonitor {
  CrawlerStatus status = 1;
  uint32 size = 2;
  uint32 claimed_item_count = 3;
  repeated ClaimedCrawlerQueueItem claimed_items = 4;
  uint32 remaining_window_requests = 5;
  uint32 window_request_count = 6;
}

message SetStatusRequest {
  CrawlerStatus status = 1;
}

message SetCrawlerStatusReply {
  CrawlerStatus status = 1;
}

message EnqueueRequest {
  string file_name = 1;
  CrawlerItemPriority priority = 2;
  string deduplication_key = 3;
  optional string correlation_id = 4;
  map<string, string> metadata = 5;
}

service CrawlerService {
  rpc GetMonitor (google.protobuf.Empty) returns (GetCrawlerMonitorReply) {}
  rpc SetStatus (SetStatusRequest) returns (SetCrawlerStatusReply) {}
  rpc Enqueue (EnqueueRequest) returns (google.protobuf.Empty) {}
  rpc Empty (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ResetLimiter(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc RemoveThrottle(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message GetAlbumRequest {
  string file_name = 1;
}

message AlbumArtist {
  string name = 1;
  string file_name = 2;
}

message Track {
  string name = 1;
  optional uint32 duration_seconds = 2;
  optional float rating = 3;
  optional string position = 4;
}

message Album {
  string name = 1;
  string file_name = 2;
  float rating = 3;
  uint32 rating_count = 4;
  repeated AlbumArtist artists = 5;
  repeated string primary_genres = 6;
  repeated string secondary_genres = 7;
  repeated string descriptors = 8;
  repeated Track tracks = 9;
  optional string release_date = 10;
}

message GetAlbumReply {
  Album album = 1;
}

service AlbumService {
  rpc GetAlbum (GetAlbumRequest) returns (GetAlbumReply) {}
}

message IsAuthorizedReply {
  bool authorized = 1;
}

message GetAuthorizationUrlReply {
  string url = 1;
}

message HandleAuthorizationCodeRequest {
  string code = 1;
}

message SpotifyArtistReference {
  string spotify_id = 1;
  string name = 2;
}

enum SpotifyAlbumType {
  ALBUM = 0;
  SINGLE = 1;
  COMPILATION = 2;
}

message SpotifyAlbumReference {
  string spotify_id = 1;
  string name = 2;
  SpotifyAlbumType album_type = 3;
}

message SpotifyTrack {
  string spotify_id = 1;
  string name = 2;
  repeated SpotifyArtistReference artists = 3;
  SpotifyAlbumReference album = 4;
}

message GetSavedTracksReply {
  repeated SpotifyTrack tracks = 1;
}

message GetPlaylistTracksRequest {
  string playlist_id = 1;
}

message GetPlaylistTracksReply {
  repeated SpotifyTrack tracks = 1;
}

service SpotifyService {
  rpc IsAuthorized (google.protobuf.Empty) returns (IsAuthorizedReply) {}
  rpc GetAuthorizationUrl (google.protobuf.Empty) returns (GetAuthorizationUrlReply) {}
  rpc HandleAuthorizationCode (HandleAuthorizationCodeRequest) returns (google.protobuf.Empty) {}
  rpc GetSavedTracks (google.protobuf.Empty) returns (GetSavedTracksReply) {}
  rpc GetPlaylistTracks (GetPlaylistTracksRequest) returns (GetPlaylistTracksReply) {}
}

message ParseFileContentStoreReply {
  uint32 count = 1;
}

service OperationsService {
  rpc FlushRedis (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ParseFileContentStore (google.protobuf.Empty) returns (ParseFileContentStoreReply) {}
}

message AggregatedFailureError {
  string error = 1;
  uint32 count = 2;
}

enum PageType {
  AlbumPage = 0;
  ArtistPage = 1;
  ChartPage = 2;
  AlbumSearchResultPage = 3;
}

message GetAggregatedFailureErrorsRequest {
  optional PageType page_type = 1;
}

message GetAggregatedFailureErrorsReply {
  repeated AggregatedFailureError errors = 1;
}

message ParsedArtistReference {
  string name = 1;
  string file_name = 2;
}

message ParsedChartAlbum {
  string file_name = 1;
  string name = 2;
  float rating = 3;
  uint32 rating_count = 4;
  repeated ParsedArtistReference artists = 5;
  repeated string primary_genres = 6;
  repeated string secondary_genres = 7;
  repeated string descriptors = 8;
  optional string release_date = 9;
}

message ParsedTrack {
  string name = 1;
  optional uint32 duration_seconds = 2;
  optional float rating = 3;
  optional string position = 4;
}

message ParsedAlbum {
  string name = 1;
  float rating = 2;
  uint32 rating_count = 3;
  repeated ParsedArtistReference artists = 4;
  repeated string primary_genres = 5;
  repeated string secondary_genres = 6;
  repeated string descriptors = 7;
  repeated ParsedTrack tracks = 8;
  optional string release_date = 9;
}

message ParsedArtistAlbum {
  string name = 1;
  string file_name = 2;
}

message ParsedArtist {
  string name = 1;
  repeated ParsedArtistAlbum albums = 2;
}

message ParsedAlbumSearchResult {
  string name = 1;
  string file_name = 2;
  repeated ParsedArtistReference artists = 3;
}

message ParsedChart {
  repeated ParsedChartAlbum albums = 1;
}

message ParsedFileData {
  oneof data {
    ParsedChart chart = 1;
    ParsedAlbum album = 2;
    ParsedArtist artist = 3;
    ParsedAlbumSearchResult album_search_result = 4;
  }
}

message ParseFileOnContentStoreRequest {
  string file_name = 1;
}

message ParseFileOnContentStoreReply {
  ParsedFileData data = 1;
}

message EnqueueRetriesRequest {
  string error = 1;
}

service ParserService {
  rpc ParseFileOnContentStore (ParseFileOnContentStoreRequest) returns (ParseFileOnContentStoreReply) {}
  rpc GetAggregatedFailureErrors (GetAggregatedFailureErrorsRequest) returns (GetAggregatedFailureErrorsReply) {}
  rpc EnqueueRetries (EnqueueRetriesRequest) returns (google.protobuf.Empty) {}
}

message AlbumSearchLookupQuery {
  string artist_name = 1;
  string album_name = 2;
}

message SearchAlbumRequest {
  AlbumSearchLookupQuery query = 1;
}

message AlbumSearchResult {
  string album_name = 1;
  string file_name = 2;
  repeated AlbumArtist artists = 3;
}

message AlbumSearchLookup {
  AlbumSearchLookupQuery query = 1;
  optional string last_updated_at = 2;
  optional string album_search_file_name = 3;
  optional string file_processing_correlation_id = 4;
  optional string album_search_file_parse_error = 5;
  optional AlbumSearchResult album_search_result = 6;
  optional string album_file_parse_error = 7;
  optional Album album = 8;
  string status = 9;
}

message SearchAlbumReply {
  AlbumSearchLookup lookup = 1;
}

message AggregatedStatus {
  string status = 1;
  uint32 count = 2;
}

message GetAggregatedAlbumSearchStatusesReply {
  repeated AggregatedStatus statuses = 1;
}

service LookupService {
  rpc SearchAlbum (SearchAlbumRequest) returns (SearchAlbumReply) {}
  rpc GetAggregatedAlbumSearchStatuses (google.protobuf.Empty) returns (GetAggregatedAlbumSearchStatusesReply) {}
}

message Profile {
  string id = 1;
  string name = 2;
  string last_updated_at = 3;
  map<string, uint32> albums = 4;
}

message ItemWithFactor {
  string item = 1;
  uint32 factor = 2;
}

message ProfileSummary {
  string id = 1;
  string name = 2;
  uint32 album_count = 3;
  uint32 indexed_album_count = 4;
  float average_rating = 5;
  uint32 median_year = 6;
  repeated ItemWithFactor artists = 7;
  repeated ItemWithFactor primary_genres = 8;
  repeated ItemWithFactor secondary_genres = 9;
  repeated ItemWithFactor descriptors = 10;
  repeated ItemWithFactor years = 11;
  repeated ItemWithFactor decades = 12;
}

message CreateProfileRequest {
  string id = 1;
  string name = 2;
}

message CreateProfileReply {
  Profile profile = 1;
}

message GetProfileRequest {
  string id = 1;
}

message GetProfileReply {
  Profile profile = 1;
}

message GetProfileSummaryRequest {
  string id = 1;
}

message GetProfileSummaryReply {
  ProfileSummary summary = 1;
}

message FileNameWithFactor {
  string file_name = 1;
  uint32 factor = 2;
}

message AddManyAlbumsToProfileRequest {
  string profile_id = 1;
  repeated FileNameWithFactor albums = 2;
}

message AddManyAlbumsToProfileReply {
  Profile profile = 1;
}

message ImportSavedSpotifyTracksRequest {
  string profile_id = 1;
}

message ImportSpotifyPlaylistTracksRequest {
  string profile_id = 1;
  string playlist_id = 2;
}

message PendingSpotifyImport {
  string profile_id = 1;
  AlbumSearchLookup album_search_lookup = 2;
  uint32 factor = 3;
}

message GetPendingSpotifyImportsRequest {
  string profile_id = 1;
}

message GetPendingSpotifyImportsReply {
  uint32 count = 1;
  repeated AggregatedStatus statuses = 2;
  repeated PendingSpotifyImport pending_imports = 3;
}

service ProfileService {
  rpc CreateProfile (CreateProfileRequest) returns (CreateProfileReply) {}
  rpc GetProfile (GetProfileRequest) returns (GetProfileReply) {}
  rpc GetProfileSummary (GetProfileSummaryRequest) returns (GetProfileSummaryReply) {}
  rpc AddManyAlbumsToProfile (AddManyAlbumsToProfileRequest) returns (AddManyAlbumsToProfileReply) {}
  rpc ImportSavedSpotifyTracks (ImportSavedSpotifyTracksRequest) returns (google.protobuf.Empty) {}
  rpc ImportSpotifyPlaylistTracks (ImportSpotifyPlaylistTracksRequest) returns (google.protobuf.Empty) {}
  rpc GetPendingSpotifyImports (GetPendingSpotifyImportsRequest) returns (GetPendingSpotifyImportsReply) {}
}

message QuantileRankAlbumAssessmentSettings {
  optional uint32 primary_genre_weight = 1;
  optional uint32 secondary_genre_weight = 2;
  optional uint32 descriptor_weight = 3;
  optional uint32 rating_weight = 4;
  optional uint32 rating_count_weight = 5;
  optional float novelty_score = 6;
}

message AlbumAssessment {
  float score = 1;
  map<string, string> metadata = 2;
}

message AssessAlbumReply {
  AlbumAssessment assessment = 1;
}

message AlbumAssessmentSettings {
  oneof settings {
    QuantileRankAlbumAssessmentSettings quantile_rank_settings = 3;
  }
}

message AssessAlbumRequest {
  string file_name = 1;
  string profile_id = 2;
  AlbumAssessmentSettings settings = 3;
}

message AlbumRecommendationSettings {
  optional uint32 count = 1;
  repeated string include_primary_genres = 2;
  repeated string include_secondary_genres = 3;
  repeated string exclude_primary_genres = 4;
  repeated string exclude_secondary_genres = 5;
}

message RecommendAlbumsRequest {
  string profile_id = 1;
  optional AlbumRecommendationSettings recommendation_settings = 2;
  optional AlbumAssessmentSettings assessment_settings = 3;
}

message AlbumRecommendation {
  Album album = 1;
  AlbumAssessment assessment = 2;
}

message RecommendAlbumsReply {
  repeated AlbumRecommendation recommendations = 1;
}

service RecommendationService {
  rpc AssessAlbum (AssessAlbumRequest) returns (AssessAlbumReply) {}
  rpc RecommendAlbums (RecommendAlbumsRequest) returns (RecommendAlbumsReply) {}
}